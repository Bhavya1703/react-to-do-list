{"version":3,"sources":["logo.svg","WorkList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WorkList","props","listItems","items","map","item","className","key","type","id","text","value","onChange","e","setUpdate","target","icon","onClick","removeItem","duration","easing","library","add","faTrash","App","state","currentItem","inputList","bind","addWork","this","setState","Date","now","preventDefault","newItem","console","log","removedItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,qMCsC5BC,MAhCf,SAAkBC,GAChB,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BACEC,KAAK,OACLC,GAAIJ,EAAKK,KACTC,MAAON,EAAKK,KACZE,SAAU,SAACC,GAAD,OAAOZ,EAAMa,UAAUD,EAAEE,OAAOJ,MAAON,EAAKE,QAExD,8BACE,4BACED,UAAU,aACVU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAOjD,OACE,6BACE,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC7BlB,K,cCvBTmB,IAAQC,IAAIC,K,IAgGGC,E,kDA7Fb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXtB,MAAO,GACPuB,YAAa,CACXhB,KAAM,GACNH,IAAK,KAKT,EAAKoB,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAdA,E,sDAkBTf,GACRiB,KAAKC,SAAS,CACZL,YAAa,CACXhB,KAAMG,EAAEE,OAAOJ,MACfJ,IAAKyB,KAAKC,W,8BAMRpB,GACNA,EAAEqB,iBACF,IAAIC,EAAUL,KAAKL,MAAMC,YACzBU,QAAQC,IAAIF,GACS,KAAjBA,EAAQzB,OACVyB,EAAO,sBAAOL,KAAKL,MAAMtB,OAAlB,CAAyBgC,IAChCL,KAAKC,SAAS,CACZ5B,MAAOgC,EACPT,YAAa,CACXhB,KAAM,GACNH,IAAK,S,iCAQFA,GAET,IAAM+B,EAAeR,KAAKL,MAAMtB,MAAMoC,QAAO,SAAClC,GAAD,OAAUA,EAAKE,MAAQA,KACpEuB,KAAKC,SAAS,CACZ5B,MAAOmC,M,gCAKD5B,EAAMH,GACd,IAAMJ,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAACC,GACLA,EAAKE,MAAQA,IACfF,EAAKK,KAAOA,MAGhBoB,KAAKC,SAAS,CACZ5B,MAAOA,M,+BAIT,OACE,yBAAKG,UAAU,OACb,6BACE,wBAAIA,UAAU,WAAd,kBAEF,gCACE,0BAAMG,GAAG,QAAQ+B,SAAUV,KAAKD,SAC9B,2BACErB,KAAK,OACLiC,YAAY,aACZ9B,MAAOmB,KAAKL,MAAMC,YAAYhB,KAC9BE,SAAUkB,KAAKH,YAEjB,4BAAQnB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEL,MAAO2B,KAAKL,MAAMtB,MAClBe,WAAYY,KAAKZ,WACjBJ,UAAWgB,KAAKhB,iB,GAvFR4B,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.be139d5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./WorkList.css\";\r\n\r\n//for little animation(npm -i react-flip-move)\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction WorkList(props) {\r\n  const items = props.items;\r\n  const listItems = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <input\r\n            type=\"text\"\r\n            id={item.text}\r\n            value={item.text}\r\n            onChange={(e) => props.setUpdate(e.target.value, item.key)}\r\n          />\r\n          <span>\r\n            <button\r\n              className=\"minus-icon\"\r\n              icon=\"trash\"\r\n              onClick={() => props.removeItem(item.key)}\r\n            ></button>\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkList;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WorkList from \"./WorkList\";\n\n// fontawesome.com for react icons\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n\n    /*bind() method allows us to easily set which object will be bound by the this keyword when a function or method is invoked. */\n    this.inputList = this.inputList.bind(this);\n    this.addWork = this.addWork.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  // taking input of items\n  inputList(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  }\n\n  // to add an item to list\n  addWork(e) {\n    e.preventDefault();\n    let newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      newItem = [...this.state.items, newItem];\n      this.setState({\n        items: newItem,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  }\n\n  // to remove an item from the list\n\n  removeItem(key) {\n    /* The filter() method creates an array filled with all array elements that pass a test*/\n    const removedItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({\n      items: removedItems,\n    });\n  }\n\n  // to edit the item entered in the list\n  setUpdate(text, key) {\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) {\n        item.text = text;\n      }\n    });\n    this.setState({\n      items: items,\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <h1 className=\"heading\">MY TO-DO LIST</h1>\n        </div>\n        <header>\n          <form id=\"to-do\" onSubmit={this.addWork}>\n            <input\n              type=\"text\"\n              placeholder=\"ENTER TEXT\"\n              value={this.state.currentItem.text}\n              onChange={this.inputList}\n            />\n            <button type=\"submit\">ADD</button>\n          </form>\n        </header>\n        <WorkList\n          items={this.state.items}\n          removeItem={this.removeItem}\n          setUpdate={this.setUpdate}\n        ></WorkList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}